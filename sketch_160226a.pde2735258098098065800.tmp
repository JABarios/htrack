
/* version 0.1 hearttrack,
  lee BT de arduino version simple
  */
String HTversion="001";


int gModo=1; //1 es android

int BAUD_RATE = 115200;//230400;//921600;//460800;//921600; //921600 for Teensy2/Teensy3/Leonardo 460800
int gOscHz = 500; //options include 250, 500, 1000, 2000, 4000, 8000, 16000, 32000 Hz - high bandwidth with many channels will exceed USB/Bluetooth bandwidth
int gOscChannels = 4; //number of channels to report
float gGraphTotalTimeSec = 2; //e.g. if 1 then the last 1 second of data is displayed
float tickSpacing = gGraphTotalTimeSec/10; //e.g. if 0.2 then vertical lines once every 200 ms 
int serialPortNumber = 0; //set to 0 for automatic detection
int screenWid = 480; //width of scrren, in pixels
int screenHt = 800; //height of screen, in pixels
boolean saveAsText = false; //save a text file you can view with excel
boolean offsetTraces = true; //vertically shift different channels to avoid overlap
boolean testSignal = false;
boolean testSimul = false;
boolean autoScale = false; //adjust vertical scale based on observed signal variability

int anchoPantalla=screenWid;
int altoPantalla=screenHt;
int anchoTeclado=anchoPantalla-80; // teclado virtual del UI 

//scrollbar
int anchoBarra=120;                   
int altoBarra=35;                   
float zoom=1;


boolean modo_serie = true;
int gFrecuenciaCardiaca=60;
int gFrecuenciaMuestra=17;
int gFrecuenciaMuestra2=7;
int gEscala=1;
int gEscalaDiv=1;
int gFrameRate=60; //60
float gDuracionPantalla=0; //calculado por ahi
float estHz=0;
String gTextoMensaje=" mi HT ";
boolean modo_conectado=false;

// Boooleanos, habria que armar una maquina de estados
boolean isConfiguring = false;
boolean isUI = false;         // pantalla UI vs pantalla REC
boolean isBT = false;          // Bluetooth conectado o no
boolean isBTiniciado=false;   //   
boolean isRECiniciado=false;   // 
boolean isSonidoOn=true;


//************   no need to edit lines below here *******


import android.content.Intent;
import android.os.Bundle;
import ketai.net.bluetooth.*;
import ketai.ui.*;
import ketai.net.*;
import ddf.minim.*;
import ketai.data.*;


import android.media.*;
import android.content.res.*;
import android.content.Context;
import android.os.Vibrator;


KetaiBluetooth bt;
KetaiList klist;
ArrayList devicesDiscovered = new ArrayList();
String myString = null;
String linea_leida = ""; //buffer para mensajes BT
String resto_linea = "";   //buffer mensaje BT pendiente de procesar 
String info = "";          //almacen temporal para proceso  


//import processing.serial.*;
import java.util.Date; //for date/time used by saveAsText
//PrintWriter output; // for file storage used by saveAsText
//Serial port;      // Create object from Serial class
int[]  val;              // Data received from the serial port
int cnt=1; //sample count
int cnt2=1;
int wm1; //screenWidth -1
int[][] values; //data for up to 3 analog channels
int maxResidualBytes = 1024; //maximum bytes left over from previous transmission
int residualBytes = 0; //number of bytes left over from previous transmission
int[]  residualRawData; //array with bytes left over from previous transmission
//float screenScale24bit = float(screenHt-1)/16777215;
int[] channelMin, channelMax, channelIntercept;
float[] channelSlope;
float pixelsPerSample = 1;
int Margin = 4; //margin in pixels for top and bottom
int halfScreenHt = screenHt / 2;
int altoBarrido=screenHt/(gOscChannels+1); // altura de los canales a mostrar
int positionHt = 200; //height of vertical bar shown at leading edge of oscilloscope
long valuesReceived = 0; 
long calibrationFrames = 240; //number of screen refreshes prior to plotting - allows us to estimate sample rate
float lastSamplePlotted = 0;
long startTime;
int kOscMaxChannels = 15; // numero maximo de canales q se pueden registrar
int lineaMenu = 60;
PFont f;
PImage p;


int[][] lineColorsRGB = { {255,0,0}, {255,0,0}, {255,0,0}, {255,0,0}, {255,0,0}, {255,0,0},
                         {255,0,0}, {255,0,0}, {255,0,0}, {255,0,0}, {255,0,0}, {255,0,0},
                         {255,0,0}, {255,0,0}, {255,0,0} };

void setup() {
  //Set the size of the screen (this is not really necessary in Android mode, but we'll do it anyway)
  size(480,800);
  textSize(28);
  orientation(PORTRAIT);
   do_setup();

};

void do_setup()
{
//  if (modo_conectado)
//    ads_setupSimple();
// 
  pantalla_inicia();  
  canales_inicia();
  f = createFont("Arial",16,true);  
      background(250); // background 0 = black, 255= white
  p = loadImage("icono_ht2.jpg");
  frameRate(gFrameRate); //refresh screen gFrameRate times per second

  
}

 
void draw() {
        if (isConfiguring && isBT) {
            inicia_bluetooth();
            isRECiniciado  = false;
            return;
          }
         if(!isBT)
           serDecode_simulando();
         else
           serDecode_simple();
           
       if (calibrationFrames > 0) {
          calibraScope();
          return;
       } 
        if(isUI){
          drawUI();
          return;
        } else {
          drawScope();
          return;
        }  
    

};